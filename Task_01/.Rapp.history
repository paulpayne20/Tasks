info()
lsit.files()
list.files()
files.exist("mytest.R")
files.exists("mytest.R")
file.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
args(files.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
file.create(jc.txt"")
nxt()
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
play()
file.list
"mytest2.R"
mytest
"mytest3.R"
nxt()
dir.create("testdir2/testdir3")
dir.create(file.path('testdir2', 'testdir3') , recrusive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink('testdir2', recursive = TRUE)
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1?
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
15:1
':'
?''
?':'
seq(1,20)
seq(0,10)
seq(0,10, by=0.5)
my_seq ,_ seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(44, NA, 5 NA)
c(44, NA, 5, NA)
x(44, NA, 5, NA)
x <-c(44, NA, 5, NA)
x * 3
y <- reprnorm(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na
my_data == NA
sum(my_na)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
## [1] 46
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
-- x[!is.na(x)& x > 0]
x[!is.na(x)& x > 0]
> c(3, 5, 7)
> [c(3, 4, 7)]
> [c(3, 5, 7)]
> x[c(3, 5, 7)]
x[c(3, 5, 7)]
> x[0]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, + 10)] [1] 3 7
x[-c(2, + 10)]
x[-c(2, 10)]
vect
vect <- c(foo = 11, bar = 2, norf = NA)
vect
name(vect)
"foo" "bar" "norf"
names(vecf)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <-matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE,dimnames = NULL)
idendtical(my_matrix, my_matrix2)
idnetical(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
pateints <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <-c()
cnames <-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
==
TRUE == true
TRUE == TRUe
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 8 )
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c()2, 4, 5)
mean(c(2, 4, 4))
mean(c(2, 4, 5))
test_func1()
boring_function.R
test_func1()
"boring_function" "ints"
"boring_function.R"
submit()
submitx
submit(x)
"My first function!"
submit()
boring_function.R
boring_function <- function(x)
submit()
boring_function('my frist function!')
"My First Function"
"boring_function('My first function!')"
submit()
x
submit()
x
function_name <- fucntion(arg1, arg2){
skip()
boring_function('My first function!')
boring_function
my_mean.R
x
skip()
c(4, 5, 10)
my_mean(c(4, 5, 10))
submit()
skip()
remainder(5)
remainder(11, )
remainder(11, 5)
remainder(divisor = 11, num 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
skip()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(functin(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0)
0
skip()
evluate(function(x){x[length]}, c(8, 4, 0))
?paste
paste("Programing", "is", "fun!")
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
skip()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
play()
telegram("Good", "morning")
nxt()
submit()
skip()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
skip()
"I" %p% "love" % "R!"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars%dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distsance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "MY Plot")
skip()
"My Plot Subtitle"
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
str(mtcars)
dim(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
